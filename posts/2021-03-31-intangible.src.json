[{"insert":"Intangible Interactions Week "},{"insert":"8"},{"insert":"\n"},{"insert":"Using Arduino to access APIs (or not)"},{"attributes":{"header":1},"insert":"\n"},{"insert":"I was originally excited to use the Arduino as Wi-Fi and HTTP client, connecting to the internet just like any other computing device and interacting with some cool APIs. However, the sample code never was able to connect to the Wi-Fi router!\nIt turns out that the router in my apartment is only supplying a 5GHz network, and the Arduino's Wi-Fi module only works with 2.4GHz networks. The router is not mine, so I didn't want to reconfigure it. Time for another plan…\nUsing Arduino as a Wi-Fi AP"},{"attributes":{"header":1},"insert":"\n"},{"insert":"Idea and demo"},{"attributes":{"header":2},"insert":"\n"},{"insert":"Instead I used the Arduino as a Wi-Fi access point and HTTP server, and used it to serve a small game:\n"},{"insert":{"attachment":[{"name":"IMG_3477.opt.mp4","size":6307416,"source":"https://static.slab.com/prod/uploads/xrfkaonr/posts/attachments/t7fNWg81aoCNVFIsvi7wRvsy.mp4"}]}},{"insert":"To play, the player first taps a hole for the rabbit to hide the carrots in. Then, the player must tape the same hole to retrieve the carrots. This is a trivial task and obviously should be expanded on to make an interesting game. However, even it its current state:\nIt could be a fun game for small children to teach them object permanence."},{"attributes":{"list":"bullet"},"insert":"\n"},{"insert":"It could be a fun game for inebriated people to teach them object permanence."},{"attributes":{"list":"bullet"},"insert":"\n"},{"insert":"Multiple people can connect to the server at the same time to cause a lot of chaos."},{"attributes":{"list":"bullet"},"insert":"\n"},{"insert":"It can be used as a memory game, or a habit-forming aid, if the player allows for a long time between placing the carrot and retrieving the carrot."},{"attributes":{"list":"bullet"},"insert":"\n"},{"insert":"The game is simple, but I made sure it was complex enough to require the server to store game state ✨ to prevent cheating ✨ since the stakes in this game are very high.\nProcess"},{"attributes":{"header":2},"insert":"\n"},{"insert":"To create the game, I mentally mapped out the game's possible states. Some of the states would be only directly accessible to the server, and some were ok to show the client. I had the server store whether the carrot was stored in a hole, and, if so, which hole. All the remaining aspects of the state were fairly transient, and could be stored in the URL or in a meta refresh tag to indicate the state to advance to after a 2-second delay.\n"},{"attributes":{"span":"half","width":730},"insert":{"image":"https://static.slab.com/prod/uploads/xrfkaonr/posts/images/lyq4jTRDuGSrukqJxL9TZqzl.png"}},{"insert":"This is a simplified state diagram, not showing the states corresponding to which hole the carrot was stored in, and the hole the player decided to look at.\nTo prototype the code, I made a client-only version that uses only JS and doesn't interact with a server. (The Arduino version of the game also doesn't use JavaScript at all!) Both versions of the game look exactly the same.\n"},{"attributes":{"link":"https://../files/2021-01-intangible/week-8/game-js.html"},"insert":"Play the JS version of the game here."},{"insert":"\n"},{"attributes":{"link":"https://../files/2021-01-intangible/week-8/week-8.ino"},"insert":"Arduino code"},{"insert":" — run on your own Arduino!"},{"insert":"\n"}]
