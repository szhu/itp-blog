[{"insert":"BLE Week 5\nFinal project progress"},{"attributes":{"header":1},"insert":"\n"},{"insert":"The chosen idea, from "},{"attributes":{"link":"https://./2021-03-04-ble.html"},"insert":"last week"},{"insert":":\nA box that can be used to drop off messages for a physical office, event, etc. It be like an anonymous feedback box or like leaving flyers on a fridge. Content moderation, access, and security are a lot easier if using Bluetooth or NFC instead of having messages be submitted online, because we know that anyone who is leaving messages necessarily has physical proximity to the box. This can potentially be also used for voting (\"tap here to take a ballot so you can cast it later\") and line queueing (\"tap here to take a ticket\")."},{"attributes":{"blockquote":true},"insert":"\n"},{"insert":"I made a small proof of concept for a BLE device that can collect votes â€” nearby users can vote on their computers or phones!\nDemo"},{"attributes":{"header":2},"insert":"\n"},{"insert":{"attachment":[{"name":"Screen Recording 2021-03-11 at 6.08.46 PM.opt.mp4","size":3503347,"source":"https://static.slab.com/prod/uploads/xrfkaonr/posts/attachments/y0C9g9UO5ErhCMSNTbxg3ASM.mp4"}]}},{"insert":"Code"},{"attributes":{"header":2},"insert":"\n"},{"attributes":{"code":true},"insert":"poll.ino"},{"insert":":\n/*"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  LED"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"  This example creates a BLE peripheral with service that contains a"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  characteristic to control an LED."},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"  The circuit:"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  - Arduino MKR WiFi 1010, Arduino Uno WiFi Rev2 board, Arduino Nano 33 IoT,"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    Arduino Nano 33 BLE, or Arduino Nano 33 BLE Sense board."},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"  You can use a generic BLE central app, like LightBlue (iOS and Android) or"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  nRF Connect (Android), to interact with the services and characteristics"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  created in this sketch."},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"  This example code is in the public domain."},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"*/"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"#include <ArduinoBLE.h>"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"BLEService"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    ledService(\"19B10000-E8F2-537E-4F6C-D104768A1214\"); // BLE LED Service"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"// BLE LED Switch Characteristic - custom 128-bit UUID, read and writable by"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"// central"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"BLEByteCharacteristic"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    switchCharacteristic(\"19B10001-E8F2-537E-4F6C-D104768A1214\","},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"                         BLERead | BLEWrite);"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"const int ledPin = LED_BUILTIN; // pin to use for the LED"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"#define N_CANDIDATES 5"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"int votes[N_CANDIDATES] = {0, 0, 0, 0, 0};"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"void setup() {"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  Serial.begin(9600);"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  while (!Serial)"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    ;"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"  // set LED pin to output mode"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  pinMode(ledPin, OUTPUT);"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"  // begin initialization"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  if (!BLE.begin()) {"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    Serial.println(\"starting BLE failed!\");"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"    while (1)"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"      ;"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  }"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"  // set advertised local name and service UUID:"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  BLE.setLocalName(\"Voting Booth\");"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  BLE.setAdvertisedService(ledService);"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"  // add the characteristic to the service"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  ledService.addCharacteristic(switchCharacteristic);"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"  // add service"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  BLE.addService(ledService);"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"  // set the initial value for the characeristic:"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  switchCharacteristic.writeValue(0);"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"  // start advertising"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  BLE.advertise();"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"  Serial.println(\"Voting Booth\");"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"}"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"int value = 0;"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"void updateValue() {"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  if (switchCharacteristic.written()) {"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    value = switchCharacteristic.value();"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    votes[value]++;"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    Serial.print(\"New vote: \");"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    Serial.print(value);"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    Serial.println();"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"    Serial.print(\"Current votes: \");"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    Serial.println();"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    for (int i = 0; i < N_CANDIDATES; i++) {"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"      Serial.print(\"  Candidate \");"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"      Serial.print(i);"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"      Serial.print(\" has \");"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"      Serial.print(votes[i]);"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"      Serial.print(\" votes\");"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"      Serial.println();"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    }"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    Serial.println();"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  }"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"}"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"void loop() {"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  // listen for BLE peripherals to connect:"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  BLEDevice central = BLE.central();"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"  // if a central is connected to peripheral:"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  if (central) {"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    Serial.print(\"Connected to central: \");"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    // print the central's MAC address:"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    Serial.println(central.address());"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"    // while the central is still connected to peripheral:"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    while (central.connected()) {"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"      updateValue();"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"      delay(value * 100);"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"      analogWrite(A0, 255);"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"      updateValue();"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"      delay(value * 100);"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"      analogWrite(A0, 0);"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    }"},{"attributes":{"code-block":"cpp"},"insert":"\n\n"},{"insert":"    // when the central disconnects, print it out:"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    Serial.print(F(\"Disconnected from central: \"));"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"    Serial.println(central.address());"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"  }"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"insert":"}"},{"attributes":{"code-block":"cpp"},"insert":"\n"},{"attributes":{"code":true},"insert":"index.html"},{"insert":":\n<!DOCTYPE html>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"<html>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"  <head>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"    <meta charset=\"utf-8\" />"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.8.0/p5.js\"></script>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.8.0/addons/p5.dom.min.js\"></script>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"    <script src=\"https://cdnjs.cloudflare.com/ajax/libs/p5.js/0.8.0/addons/p5.sound.min.js\"></script>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"    <script"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"      src=\"https://unpkg.com/p5ble@0.0.4/dist/p5.ble.js\""},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"      type=\"text/javascript\""},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"    ></script>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"  </head>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"  <body>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"    <fieldset>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"      <legend>Connect</legend>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"      <button id=\"connect\">Connect</button>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"    </fieldset>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"    <fieldset>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"      <legend>Vote</legend>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"      <ul>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"        <li>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"          <button class=\"vote\" disabled data-value=\"0\">"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"            Vote for candidate 0"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"          </button>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"        </li>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"        <li>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"          <button class=\"vote\" disabled data-value=\"1\">"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"            Vote for candidate 1"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"          </button>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"        </li>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"        <li>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"          <button class=\"vote\" disabled data-value=\"2\">"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"            Vote for candidate 2"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"          </button>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"        </li>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"        <li>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"          <button class=\"vote\" disabled data-value=\"3\">"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"            Vote for candidate 3"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"          </button>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"        </li>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"        <li>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"          <button class=\"vote\" disabled data-value=\"4\">"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"            Vote for candidate 4"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"          </button>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"        </li>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"      </ul>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"    </fieldset>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"    <script src=\"sketch.js\"></script>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"  </body>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"insert":"</html>"},{"attributes":{"code-block":"xml"},"insert":"\n"},{"attributes":{"code":true},"insert":"sketch.js"},{"insert":":\n// The serviceUuid must match the serviceUuid of the device you would like to connect"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"const serviceUuid = \"19b10000-e8f2-537e-4f6c-d104768a1214\";"},{"attributes":{"code-block":"javascript"},"insert":"\n\n"},{"insert":"let myBLE;"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"let myCharacteristic;"},{"attributes":{"code-block":"javascript"},"insert":"\n\n"},{"insert":"const $id = (id) => document.getElementById(id);"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"const $ = (el) => document.querySelectorAll(el);"},{"attributes":{"code-block":"javascript"},"insert":"\n\n"},{"insert":"function setup() {"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"  myBLE = new p5ble();"},{"attributes":{"code-block":"javascript"},"insert":"\n\n"},{"insert":"  $id(\"connect\").addEventListener(\"click\", connectToBle);"},{"attributes":{"code-block":"javascript"},"insert":"\n\n"},{"insert":"  for (let button of $(\"button.vote\")) {"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"    button.addEventListener(\"click\", (e) =>"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"      sendValueToBle(e.target.getAttribute(\"data-value\"))"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"    );"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"  }"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"}"},{"attributes":{"code-block":"javascript"},"insert":"\n\n"},{"insert":"function connectToBle() {"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"  $id(\"connect\").innerText = \"Connecting\";"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"  // Connect to a device by passing the service UUID"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"  myBLE.connect(serviceUuid, gotCharacteristics);"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"}"},{"attributes":{"code-block":"javascript"},"insert":"\n\n"},{"insert":"function gotCharacteristics(error, characteristics) {"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"  if (error) console.log(\"error: \", error);"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"  console.log(\"characteristics: \", characteristics);"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"  // Set the first characteristic as myCharacteristic"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"  myCharacteristic = characteristics[0];"},{"attributes":{"code-block":"javascript"},"insert":"\n\n"},{"insert":"  $id(\"connect\").innerText = \"Connected\";"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"  for (let button of $(\"button.vote\")) {"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"    button.disabled = false;"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"  }"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"}"},{"attributes":{"code-block":"javascript"},"insert":"\n\n"},{"insert":"function sendValueToBle(value) {"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"  // Write the value of the input to the myCharacteristic"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"  myBLE.write(myCharacteristic, parseInt(value));"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"}"},{"attributes":{"code-block":"javascript"},"insert":"\n"},{"insert":"What's left:"},{"attributes":{"header":2},"insert":"\n"},{"insert":"I'm still figuring out what the application of the final project should be. It could be:\nA voting booth, which is what I've currently prototyped,"},{"attributes":{"list":"bullet"},"insert":"\n"},{"insert":"An anonymous comment drop box (contents are intended to be private) or a virtual bulletin board (contents are intended to be public), or"},{"attributes":{"list":"bullet"},"insert":"\n"},{"insert":"A ticket-queueing system."},{"attributes":{"list":"bullet"},"insert":"\n"},{"insert":"Here are some observations I've made, based on the prototype, that could help me decide which idea to work on:\nThere is an obvious flaw in the proof of concept, which is that there is no way to prevent someone from voting multiple times, even by accident! Having such a system designed is critical to make the voting booth idea seem realistic."},{"attributes":{"list":"bullet"},"insert":"\n"},{"insert":"I haven't tried sending strings or other variable-length data over Bluetooth yet. If doing this proves to be hard, it might make the comment box idea less feasible. I'm also not sure how well Arduinos can handle storing sizeable amounts of data, so I'm also investigating how to make a computer act as a peripheral device."},{"attributes":{"list":"bullet"},"insert":"\n"},{"insert":"The ticket queuing system also requires storing a variable amount of data, although of a quantity that can probably fit in Arduino memory, at least for a demo."},{"attributes":{"list":"bullet"},"insert":"\n"}]
